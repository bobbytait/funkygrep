<Window x:Class="FunkyGrep.UI.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:mvvm="http://prismlibrary.com/"
        xmlns:viewModels="clr-namespace:FunkyGrep.UI.ViewModels"
        xmlns:md="https://github.com/fantasticfiasco/mvvm-dialogs"
        xmlns:toolkit="clr-namespace:System.Windows.Controls;assembly=DotNetProjects.Input.Toolkit"
        xmlns:ui="clr-namespace:FunkyGrep.UI"
        xmlns:converters="clr-namespace:FunkyGrep.UI.Converters"
        xmlns:numericUpDownLib="clr-namespace:NumericUpDownLib;assembly=NumericUpDownLib"
        mvvm:ViewModelLocator.AutoWireViewModel="True"
        mc:Ignorable="d"
        Title="{Binding Source={x:Static ui:App.Version}, StringFormat=FunkyGrep {0}}"
        Height="450" 
        Width="800" 
        Icon="/Resources/FunkyGrep.ico" 
        WindowStyle="SingleBorderWindow"
        Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
        md:DialogServiceViews.IsRegistered="True"
        d:DataContext="{d:DesignInstance viewModels:MainWindowViewModel}">
    <Grid Margin="5, 5, 5, 5" FocusManager.FocusedElement="{Binding ElementName=TextBoxSearchPattern}">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="70" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <Grid.Resources>
            <Style TargetType="Label">
                <Setter Property="HorizontalAlignment" Value="Right" />
            </Style>
            <Style TargetType="TextBox">
                <Setter Property="VerticalContentAlignment" Value="Center" />
            </Style>
        </Grid.Resources>

        <Label Grid.Row="0" Grid.Column="0" Content="_Directory" Target="{Binding ElementName=AutoCompleteBoxDirectory}" />
        <Grid Grid.Row="0" Grid.Column="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <toolkit:AutoCompleteBox Grid.Row="0" Grid.Column="0" Width="Auto" 
                                      Populating="HandleDirectoryAutoCompleteBoxPopulating"
                                      Text="{Binding Directory, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                      IsEnabled="{Binding SearchIsNotRunning}"
                                      x:Name="AutoCompleteBoxDirectory" />
            <Button Grid.Row="0" Grid.Column="1" Content="..." Width="Auto" Padding="5, 0, 5, 0"
                    Command="{Binding ShowSelectFolderDialogCommand}" IsEnabled="{Binding SearchIsNotRunning}" />
        </Grid>
        <CheckBox Grid.Row="0" Grid.Column="2" Content="_Include Subdirs" VerticalAlignment="Center" Margin="5, 0, 0, 0"
                  IsChecked="{Binding IncludeSubDirectories}" IsEnabled="{Binding SearchIsNotRunning}" />

        <Label Grid.Row="1" Grid.Column="0" Content="_Files" Target="{Binding ElementName=TextBoxFiles}" />
        <TextBox Grid.Row="1" Grid.Column="1" Width="Auto" Text="{Binding FilePatternsSpaceSeparated, UpdateSourceTrigger=PropertyChanged}"
                 IsEnabled="{Binding SearchIsNotRunning}" x:Name="TextBoxFiles" />
        <StackPanel Grid.Row="1" Grid.Column="2" Orientation="Horizontal">
            <CheckBox Content="Skip _Binaries" VerticalAlignment="Center" Margin="5, 0, 5, 0" IsChecked="{Binding SkipBinaryFiles}" 
                      IsEnabled="{Binding SearchIsNotRunning}" />
        </StackPanel>

        <Label Grid.Row="2" Grid.Column="0" Content="_Pattern" Target="{Binding ElementName=TextBoxSearchPattern}" />
        <Grid Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <TextBox Grid.Row="0" Grid.Column="0" Width="Auto" Text="{Binding SearchPattern, UpdateSourceTrigger=PropertyChanged}" 
                     IsEnabled="{Binding SearchIsNotRunning}" x:Name="TextBoxSearchPattern" />
            <StackPanel Grid.Row="0" Grid.Column="1" Orientation="Horizontal" VerticalAlignment="Center" Margin="5, 0, 0, 0">
                <CheckBox Content="_Regex"  Margin="0, 0, 5, 0" IsChecked="{Binding SearchPatternIsRegex}" VerticalAlignment="Center"
                          IsEnabled="{Binding SearchIsNotRunning}" />
                <CheckBox Content="Ignore _Case" IsChecked="{Binding IgnoreCase}" VerticalAlignment="Center"
                          IsEnabled="{Binding SearchIsNotRunning}" />
                <Label Content="Context _Lines" Target="{Binding ElementName=ByteUpDownContextLineCount}" VerticalAlignment="Center"
                       Padding="5, 0, 5, 0" />
                <numericUpDownLib:ByteUpDown MaxValue="255" MinValue="0"
                                             Value="{Binding ContextLineCount, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                                             IsEnabled="{Binding SearchIsNotRunning}"
                                             x:Name="ByteUpDownContextLineCount"
                                             VerticalAlignment="Center" />
            </StackPanel>
        </Grid>

        <Grid Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="3" Margin="0, 5, 0, 5">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="50" />
            </Grid.ColumnDefinitions>

            <StackPanel Grid.Row="0" Grid.Column="0" Orientation="Vertical">
                <ProgressBar Height="5" Value="{Binding SearchProgress.SearchedCount}" Maximum="{Binding SearchProgress.TotalFileCount}">
                    <ProgressBar.Style>
                        <Style TargetType="ProgressBar">
                            <Setter Property="IsIndeterminate" Value="False" />
                            <Style.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding SearchIsRunning}" Value="True" />
                                        <Condition Binding="{Binding SearchProgress.TotalFileCountIsSet}" Value="False" />
                                    </MultiDataTrigger.Conditions>
                                    <MultiDataTrigger.Setters>
                                        <Setter Property="IsIndeterminate" Value="True" />
                                    </MultiDataTrigger.Setters>
                                </MultiDataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ProgressBar.Style>
                </ProgressBar>
                <Label HorizontalAlignment="Left" FontSize="12" Padding="0, 0, 0, 0">
                    <Label.Style>
                        <Style TargetType="Label">
                            <Setter Property="Content" Value="Search not running." />
                            <Style.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding SearchIsRunning}" Value="True" />
                                        <Condition Binding="{Binding SearchProgress.TotalFileCountIsSet}" Value="False" />
                                    </MultiDataTrigger.Conditions>
                                    <MultiDataTrigger.Setters>
                                        <Setter Property="Content">
                                            <Setter.Value>
                                                <TextBlock>
                                                    <TextBlock.Text>
                                                        <MultiBinding StringFormat="{}{0:n0} done. {1:n0} skipped. {2:n0} failed.">
                                                            <Binding Path="SearchProgress.SearchedCount" />
                                                            <Binding Path="SearchProgress.SkippedCount" />
                                                            <Binding Path="SearchProgress.FailedCount" />
                                                        </MultiBinding>
                                                    </TextBlock.Text>
                                                </TextBlock>
                                            </Setter.Value>
                                        </Setter>
                                    </MultiDataTrigger.Setters>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding SearchIsRunning}" Value="True" />
                                        <Condition Binding="{Binding SearchProgress.TotalFileCountIsSet}" Value="True" />
                                    </MultiDataTrigger.Conditions>
                                    <MultiDataTrigger.Setters>
                                        <Setter Property="Content">
                                            <Setter.Value>
                                                <TextBlock>
                                                    <TextBlock.Text>
                                                        <MultiBinding StringFormat="{}{0:n0} of {1:n0} done. {2:n0} skipped. {3:n0} failed.">
                                                            <Binding Path="SearchProgress.SearchedCount" />
                                                            <Binding Path="SearchProgress.TotalFileCount" />
                                                            <Binding Path="SearchProgress.SkippedCount" />
                                                            <Binding Path="SearchProgress.FailedCount" />
                                                        </MultiBinding>
                                                    </TextBlock.Text>
                                                </TextBlock>
                                            </Setter.Value>
                                        </Setter>
                                    </MultiDataTrigger.Setters>
                                </MultiDataTrigger>
                                <DataTrigger Binding="{Binding LastSearchCompleted}" Value="False">
                                    <Setter Property="Content" Value="Last search was cancelled." />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding LastSearchDurationIsSet}" Value="True">
                                    <Setter Property="Content" Value="{Binding LastSearchDuration}" />
                                    <Setter Property="ContentStringFormat" Value="Last search duration: {0}" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Label.Style>
                </Label>
            </StackPanel>

            <Button Grid.Row="0" Grid.Column="1" Margin="5, 0, 0, 0" IsDefault="True">
                <Button.Style>
                    <Style TargetType="Button">
                        <Setter Property="Content" Value="_Go" />
                        <Setter Property="Command" Value="{Binding RunSearchCommand}" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding SearchIsRunning}" Value="True">
                                <Setter Property="Content" Value="_Stop" />
                                <Setter Property="Command" Value="{Binding AbortSearchCommand}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
        </Grid>

        <TabControl Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="3">
            <TabControl.Resources>
                <DataTemplate DataType="viewModels:IFileItem">
                    <Label Content="{Binding RelativeFilePath}" Padding="0" Margin="0">
                        <Label.Resources>
                            <Style TargetType="Label" BasedOn="{StaticResource LeftEllipsesLabelStyle}">
                                <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource AncestorType=DataGridRow}}" />
                                <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=DataGridRow}}" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType=DataGridRow}}" Value="True">
                                        <DataTrigger.Setters>
                                            <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource AncestorType=DataGridCell}}" />
                                            <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=DataGridCell}}" />
                                        </DataTrigger.Setters>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Label.Resources>
                    </Label>
                </DataTemplate>
                <Style TargetType="TextBlock" x:Key="LineCellTextBlockStyle">
                    <Setter Property="HorizontalAlignment" Value="Right" />
                    <Setter Property="VerticalAlignment" Value="Center" />
                </Style>
                <Style TargetType="DataGridRow">
                    <EventSetter Event="PreviewMouseLeftButtonDown" Handler="HandleDataGridRowPreviewMouseLeftButtonDown" />
                </Style>
            </TabControl.Resources>
            <TabItem Header="{Binding SearchResults.Count, FallbackValue=0}" HeaderStringFormat="{}Results ({0:n0})" IsSelected="True">
                <DataGrid ItemsSource="{Binding SearchResults}" IsReadOnly="True" AutoGenerateColumns="False" 
                          VerticalGridLinesBrush="LightGray" HorizontalGridLinesBrush="LightGray" AlternatingRowBackground="Gainsboro" 
                          AlternationCount="2" SelectionMode="Single" CanUserSortColumns="False" 
                          PreviewMouseRightButtonUp="HandleDataGridPreviewMouseRightButtonUp">
                    <DataGrid.Resources>
                        <converters:SearchResultItemToXamlConverter x:Key="SearchResultItemToXamlConverter">
                            <converters:SearchResultItemToXamlConverter.MatchRunStyle>
                                <Style TargetType="Run">
                                    <Setter Property="Foreground" Value="DarkRed" />
                                    <Setter Property="FontWeight" Value="Bold" />
                                </Style>
                            </converters:SearchResultItemToXamlConverter.MatchRunStyle>
                        </converters:SearchResultItemToXamlConverter>
                        <Style TargetType="DataGrid">
                            <Style.Triggers>
                                <Trigger Property="HasItems" Value="False">
                                    <Trigger.Setters>
                                        <Setter Property="ContextMenu" Value="{x:Null}" />
                                    </Trigger.Setters>
                                </Trigger>
                                <Trigger Property="HasItems" Value="True">
                                    <Trigger.Setters>
                                        <Setter Property="ContextMenu">
                                            <Setter.Value>
                                                <!-- ReSharper disable once Xaml.BindingWithContextNotResolved -->
                                                <ContextMenu IsEnabled="{Binding PlacementTarget.HasItems, RelativeSource={RelativeSource Mode=Self}}">
                                                    <ContextMenu.Resources>
                                                        <Style TargetType="MenuItem">
                                                            <!-- ReSharper disable once Xaml.BindingWithContextNotResolved -->
                                                            <Setter Property="CommandParameter" 
                                                                    Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Path=PlacementTarget.SelectedItem}" />
                                                        </Style>
                                                    </ContextMenu.Resources>

                                                    <MenuItem Header="_Copy">
                                                        <MenuItem Header="Absolute _Path" Command="{Binding CopyAbsoluteFilePathToClipboardCommand}" />
                                                        <MenuItem Header="_Relative Path" Command="{Binding CopyRelativeFilePathToClipboardCommand}" />
                                                        <MenuItem Header="_File" Command="{Binding CopyFileToClipboardCommand}" />
                                                        <MenuItem Header="_Line Number" Command="{Binding CopyLineNumberToClipboardCommand}" />
                                                    </MenuItem>
                                                    <MenuItem Header="_Open">
                                                        <MenuItem Header="_Notepad" Command="{Binding OpenFileInEditorCommand}" />
                                                    </MenuItem>
                                                </ContextMenu>
                                            </Setter.Value>
                                        </Setter>
                                    </Trigger.Setters>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </DataGrid.Resources>
                    <DataGrid.Columns>
                        <DataGridTemplateColumn Header="File" Width="*" CellTemplate="{StaticResource {DataTemplateKey DataType=viewModels:IFileItem}}" />
                        <DataGridTextColumn Binding="{Binding Match.LineNumber, Mode=OneTime}" Header="Line" Width="50" 
                                            ElementStyle="{StaticResource LineCellTextBlockStyle}" />
                        <DataGridTemplateColumn Header="Text" Width="*">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate DataType="viewModels:SearchResultItem">
                                    <ContentControl Content="{Binding Mode=OneTime, Converter={StaticResource SearchResultItemToXamlConverter}}" 
                                            FontFamily="Cascadia Code, Fira Code, PragmataPro Mono, Source Code Pro, JetBrains Mono, Consolas, Courier New" />
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                    </DataGrid.Columns>
                </DataGrid>
            </TabItem>
            <TabItem Header="{Binding SearchErrors.Count, FallbackValue=0}" HeaderStringFormat="{}Errors ({0:n0})">
                <DataGrid ItemsSource="{Binding SearchErrors}" IsReadOnly="True" AutoGenerateColumns="False" 
                          VerticalGridLinesBrush="LightGray" HorizontalGridLinesBrush="LightGray" AlternatingRowBackground="Gainsboro" 
                          AlternationCount="2" SelectionMode="Single" CanUserSortColumns="False" 
                          PreviewMouseRightButtonUp="HandleDataGridPreviewMouseRightButtonUp">
                    <DataGrid.Resources>
                        <Style TargetType="DataGrid">
                            <Style.Triggers>
                                <Trigger Property="HasItems" Value="False">
                                    <Trigger.Setters>
                                        <Setter Property="ContextMenu" Value="{x:Null}" />
                                    </Trigger.Setters>
                                </Trigger>
                                <Trigger Property="HasItems" Value="True">
                                    <Trigger.Setters>
                                        <Setter Property="ContextMenu">
                                            <Setter.Value>
                                                <!-- ReSharper disable once Xaml.BindingWithContextNotResolved -->
                                                <ContextMenu IsEnabled="{Binding PlacementTarget.HasItems, RelativeSource={RelativeSource Mode=Self}}">
                                                    <ContextMenu.Resources>
                                                        <Style TargetType="MenuItem">
                                                            <!-- ReSharper disable once Xaml.BindingWithContextNotResolved -->
                                                            <Setter Property="CommandParameter" 
                                                                    Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Path=PlacementTarget.SelectedItem}" />
                                                        </Style>
                                                    </ContextMenu.Resources>

                                                    <MenuItem Header="_Copy">
                                                        <MenuItem Header="Absolute _Path" Command="{Binding CopyAbsoluteFilePathToClipboardCommand}" />
                                                        <MenuItem Header="_Relative Path" Command="{Binding CopyRelativeFilePathToClipboardCommand}" />
                                                        <MenuItem Header="_File" Command="{Binding CopyFileToClipboardCommand}" />
                                                    </MenuItem>
                                                    <MenuItem Header="_Open">
                                                        <MenuItem Header="_Notepad" Command="{Binding OpenFileInEditorCommand}" />
                                                    </MenuItem>
                                                </ContextMenu>
                                            </Setter.Value>
                                        </Setter>
                                    </Trigger.Setters>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </DataGrid.Resources>
                    <DataGrid.Columns>
                        <DataGridTemplateColumn Header="File" Width="*" CellTemplate="{StaticResource {DataTemplateKey DataType=viewModels:IFileItem}}" />
                        <DataGridTextColumn Header="Error" Width="*" Binding="{Binding Error}">
                            <DataGridTextColumn.ElementStyle>
                                <Style TargetType="TextBlock">
                                    <Setter Property="Foreground" Value="DarkRed" />
                                </Style>
                            </DataGridTextColumn.ElementStyle>
                        </DataGridTextColumn>
                    </DataGrid.Columns>
                </DataGrid>
            </TabItem>
        </TabControl>
    </Grid>
</Window>
